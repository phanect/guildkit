import { mkdir, writeFile } from "node:fs/promises";
import { join } from "node:path";
import { XMLParser } from "fast-xml-parser";

type ArrayFilterCallbackFn<T> = Parameters<T[]["filter"]>[0];

const dedupeFileter = <T>(fn: (el1: T, el2: T) => boolean): ArrayFilterCallbackFn<T> =>
  (filterElement1, i, arr) =>
    arr.findIndex((filterElement2) => fn(filterElement1, filterElement2)) === i;

const generateCurrencyEnum = async () => {
  type SixGroupIsoCurrencyList = {
    ISO_4217: {
      CcyTbl: {
        CcyNtry: {
          CtryNm: string;
          CcyNm: string;
          Ccy: string;
          CcyNbr: string;
          CcyMnrUnts: number;
        }[];
      };
    };
  };

  const res = await fetch("https://www.six-group.com/dam/download/financial-information/data-center/iso-currrency/lists/list-one.xml");
  const xmlText = await res.text();
  const xml = new XMLParser().parse(xmlText) as SixGroupIsoCurrencyList;

  const currencies = xml.ISO_4217.CcyTbl.CcyNtry
    .map(({ CtryNm, CcyNm, Ccy }) => ({
      name: CcyNm,
      // Remove contents in parenthesis and after comma
      // because they are too redundant and/or sometimes politically sensitive.
      // e.g. "TANZANIA, UNITED REPUBLIC OF" → "TANZANIA"
      // e.g. "NETHERLANDS (THE)" → "NETHERLANDS"
      country: CtryNm
        .split("(")[0]
        .split(",")[0]
        .trim(),
      code: Ccy,
    })).filter((currency) => !!currency.code)
    .filter(dedupeFileter((currency1, currency2) => currency1.code === currency2.code))
    .sort((currencyA, currencyB) => currencyA.code > currencyB.code ? 1 : -1);

  const intermediateDirPath = join(import.meta.dirname, "../src/intermediate");

  await mkdir(intermediateDirPath, { recursive: true });
  await writeFile(
    join(intermediateDirPath, "currencies.ts"), `
      // Auto generated by scripts/scripts-sync-currency.ts. DO NOT EDIT MANUALLY.

      export const currencies = ${ JSON.stringify(currencies, undefined, 2) } as const;
    `,
  );
};

await generateCurrencyEnum();
